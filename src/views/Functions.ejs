<%- include('../components/Header.ejs') %>

<div class="container mx-auto mt-8 p-8 rounded-md mb-24">
  <h1 class="text-3xl font-normal mb-8 text-center">
    JavaScript Functions Documentation
  </h1>
  <!-- Section 1: Introduction -->
  <section class="mb-8">
    <h2 class="text-2xl mb-4">1. Introduction</h2>

    <p class="mb-4">
      Welcome to the documentation for JavaScript Functions. This section provides an overview of Javascript Functions and its functionality.
    </p>
  </section>

  <!-- Section 2: Regular Function Declaration -->
  <section class="mb-8">
    <h2 class="text-2xl mb-4">2. Regular Function Declaration</h2>

    <p class="mb-4">
      Regular functions are defined using the keyword <code>function</code>.
      They have a name, which in this case is <code>getRandomInt</code>. These
      functions can be called using their name and are often used for reusable
      pieces of code.
    </p>

    <pre class="bg-slate-200 p-4 rounded-md overflow-auto">
<code>function getRandomInt(min, max) {
  return Math.floor(Math.random() * (max + 1 - min) + min);
}</code></pre>
    <p class="m-4">Example usage:</p>
    <pre class="bg-slate-200 p-4 rounded-md overflow-auto">
<code>const regularFunctionResult = getRandomInt(1, 100);
console.log(regularFunctionResult);</code></pre>
  </section>

  <!-- Section 3: Anonymous Function (Function Expression) -->
  <section class="mb-8">
    <h2 class="text-2xl mb-4">3. Anonymous Function (Function Expression)</h2>

    <p class="mb-4">
      Anonymous functions, also known as function expressions, are defined
      without a name. They are often assigned to a variable. These functions can
      be useful when you need a function for a short-lived purpose or as an
      argument to another function.
    </p>

    <pre class="bg-slate-200 p-4 rounded-md overflow-auto">
<code>const getRandomIntAnonymousFunction = function (min, max) {
  return Math.floor(Math.random() * (max + 1 - min) + min);
};</code></pre>
    <!-- Example of calling the anonymous function -->
    <p class="m-4">Example usage:</p>
    <pre class="bg-slate-200 p-4 rounded-md overflow-auto">
<code>const anonymousFunctionResult = getRandomIntAnonymousFunction(1, 100);
console.log(anonymousFunctionResult);</code></pre>
  </section>

  <!-- Section 4: Arrow Functions -->
  <section class="mb-8">
    <h2 class="text-2xl mb-4">4. Arrow Functions</h2>
    <p class="mb-4">
      Arrow functions are a concise way to write functions in JavaScript. They
      have a shorter syntax compared to regular functions and do not bind their
      own 'this'.
    </p>

    <!-- Subsection 4.1: Arrow Function Syntax -->
    <h3 class="text-xl mb-2">4.1 Arrow Function Syntax</h3>
    <pre class="bg-slate-200 p-4 rounded-md overflow-auto">
<code>const getRandomIntArrowFunction = (min, max) => {
  return Math.floor(Math.random() * (max + 1 - min) + min);
};</code></pre>

    <!-- Example of calling the arrow function with syntax -->
    <p class="m-4">Example usage:</p>
    <pre class="bg-slate-200 p-4 rounded-md overflow-auto">
<code>const arrowFunctionResult = getRandomIntArrowFunction(1, 100);
console.log(arrowFunctionResult);</code></pre>

    <!-- Subsection 4.2: Arrow Function One-Liner -->
    <h3 class="text-xl mb-4 mt-4">4.2 Arrow Function One-Liner</h3>
    <pre class="bg-slate-200 p-4 rounded-md overflow-auto">
<code>const getRandomIntArrowFunctionOneLiner = (min, max) => Math.floor(Math.random() * (max + 1 - min) + min);</code></pre>

    <!-- Example of calling the one-liner arrow function -->
    <p class="m-4">Example usage:</p>
    <pre class="bg-slate-200 p-4 rounded-md overflow-auto">
<code>const oneLinerResult = getRandomIntArrowFunctionOneLiner(1, 100);
console.log(oneLinerResult);</code></pre>
  </section>
  <!-- Section 5: Async Functions -->
<section class="mb-8">
  <h2 class="text-2xl mb-4">5. Async Functions</h2>

  <p class="mb-4">
    Async functions are a feature introduced in ECMAScript 2017 (ES8). They provide a cleaner and more concise way to work with asynchronous code in JavaScript. An async function returns a promise implicitly, allowing you to write asynchronous code that looks synchronous.
  </p>

  <p class="mb-4">
    The syntax for defining an async function is similar to regular functions, but with the <code>async</code> keyword preceding the function declaration. Inside an async function, you can use the <code>await</code> keyword to pause the execution and wait for a promise to resolve before continuing.
  </p>

  <pre class="bg-slate-200 p-4 rounded-md overflow-auto">
<code>async function fetchData() {
  const response = await fetch('https://api.example.com/data');
  const data = await response.json();
  return data;
}</code></pre>

  <p class="m-4">Example usage:</p>
  <pre class="bg-slate-200 p-4 rounded-md overflow-auto">
<code>fetchData()
  .then(data => {
    console.log(data);
  })
  .catch(error => {
    console.error('Error fetching data:', error);
  });</code></pre>

  <p class="mb-4">
    Async functions are commonly used when working with asynchronous operations such as fetching data from a server, reading files, or making network requests.
  </p>
</section>

  <div class="flex justify-between">
    <div><%-include('../components/BackButton.ejs')%></div>
    <div class="flex items-center">
      <p class="mr-4">Variables</p>
      <a href="/Variables"
        ><img src="/svg/arrow.svg" alt="Arrow" height="50" width="50"
      /></a>
    </div>
  </div>
</div>

<%- include('../components/Footer.ejs') %>
