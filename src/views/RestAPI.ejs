<%- include('../components/Header.ejs') %>

<div class="container mx-auto mt-8 p-8 rounded-md mb-24">
  <h1 class="text-3xl font-normal mb-8 text-center">
    Node.js Express REST API Documentation
  </h1>

  <!-- Section 1: Introduction -->
  <section class="mb-8">
    <h2 class="text-2xl mb-4">1. Introduction</h2>

    <p class="mb-4">
      Welcome to the documentation for Node.js Express REST API. This section
      provides an overview of the API and its functionality.
    </p>
  </section>

  <!-- Section 2: Setting Up Express -->
  <section class="mb-8">
    <h2 class="text-2xl mb-4">2. Setting Up Express</h2>

    <p class="mb-4">
      To get started, you need to set up an Express application. Follow the
      steps below to initialize your project and install the necessary
      dependencies.
    </p>

    <pre class="bg-codeBG p-4 rounded-md overflow-auto">
<code class="text-codeText"><code class="text-codeVariable">const</code> express = require(<code class="text-codeString">'express'</code>);
<code class="text-codeVariable">const</code> app = express();

// Define your routes and middleware here

app.listen(<code class="text-codeString">3000</code>, () => {
  console.log(<code class="text-codeString">'Server is running on port 3000'</code>);
});</code></pre>
  </section>

  <!-- Section 4: Handling HTTP Methods -->
  <section class="mb-8">
    <h2 class="text-2xl mb-4">4. Handling HTTP Methods</h2>

    <!-- Subsection 4.1: GET Method -->
    <section class="mb-8">
      <h3 class="text-xl mb-4">4.1 GET Method</h3>

      <p class="mb-4">
        The GET method is used to retrieve data from the server. Below is an
        example of handling a GET request to retrieve todos.
      </p>

      <pre class="bg-codeBG p-4 rounded-md overflow-auto">
<code class="text-codeText">app.get(<code class="text-codeString">'/api/todos'</code>, (req, res) => {
  // Your logic to retrieve todos from the database
  res.json({ todos: [...] });
});</code></pre>
    </section>

    <!-- Subsection 4.2: POST Method -->
    <section class="mb-8">
      <h3 class="text-xl mb-4">4.2 POST Method</h3>

      <p class="mb-4">
        The POST method is used to submit data to the server to create a new
        resource. Below is an example of handling a POST request to create a new
        user.
      </p>

      <pre class="bg-codeBG p-4 rounded-md overflow-auto">
<code class="text-codeText">app.post(<code class="text-codeString">'/api/users'</code>, (req, res) => {
  // Logic to create a new user based on request body
  res.status(<code class="text-codeString">201</code>).json({ message: <code class="text-codeString">'User created successfully'</code> });
});</code></pre>
    </section>

    <!-- Subsection 4.3: DELETE Method -->
    <section class="mb-8">
      <h3 class="text-xl mb-4">4.3 DELETE Method</h3>

      <p class="mb-4">
        The DELETE method is used to delete a resource identified by a specific
        URI. Below is an example of handling a DELETE request to delete a user
        by ID.
      </p>

      <pre class="bg-codeBG p-4 rounded-md overflow-auto">
<code class="text-codeText">app.delete(<code class="text-codeString">'/api/users/:id'</code>, (req, res) => {
  <code class="text-codeVariable">const</code> userId = req.params.id;
  // Logic to delete user by ID
  res.json({ message: <code class="text-codeString">'User deleted successfully'</code> });
});</code></pre>
    </section>

    <!-- Subsection 4.4: PUT vs PATCH -->
    <section class="mb-8">
      <h3 class="text-xl mb-4">4.4 PUT vs PATCH</h3>

      <p class="mb-4">
        Both PUT and PATCH methods are used to update resources, but they differ
        in their behavior. PUT is used to update the entire resource, while
        PATCH is used to apply partial modifications to the resource.
      </p>

      <p class="mb-4">
        Here's an example illustrating the difference between PUT and PATCH:
      </p>

      <pre class="bg-codeBG p-4 rounded-md overflow-auto">
<code class="text-codeText">app.put(<code class="text-codeString">'/api/users/:id'</code>, (req, res) => {
  <code class="text-codeVariable">const</code> userId = req.params.id;
  // Logic to update user by ID with entire resource
  res.json({ message: <code class="text-codeString">'User updated successfully'</code> });
});

app.patch(<code class="text-codeString">'/api/users/:id'</code>, (req, res) => {
  <code class="text-codeVariable">const</code> userId = req.params.id;
  // Logic to update user by ID with partial modifications
  res.json({ message: <code class="text-codeString">'User updated successfully'</code> });
});</code></pre>
    </section>

    <!-- Section 5: Handling Request Parameters -->
    <section class="mb-8 border-b-2 border-stone-200">
      <h2 class="text-2xl mb-4">5. Handling Request Parameters</h2>

      <p class="mb-4">
        Learn how to handle request parameters, both from the URL and request
        body. Here's an example of handling a parameter in the URL.
      </p>

      <pre class="bg-codeBG p-4 rounded-md overflow-auto mb-8">
<code class="text-codeText">app.get(<code class="text-codeString">'/api/users/:id'</code>, (req, res) => {
  <code class="text-codeVariable">const</code> userId = req.params.id;
  // Your logic to retrieve user details by ID
  res.json({ user: { id: userId, name: <code class="text-codeString">'John Doe'</code> } });
});</code></pre>
    </section>
  </section>

  <div class="flex justify-between">
    <div><%-include('../components/BackButton.ejs')%></div>
    <div class="flex items-center">
      <p class="mr-4">Package.json</p>
      <a href="/package-json"
        ><img src="/svg/arrow.svg" alt="Arrow" height="50" width="50"
      /></a>
    </div>
  </div>
</div>

<%- include('../components/Footer.ejs') %>
